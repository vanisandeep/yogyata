<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Linq2Rest</name>
  </assembly>
  <members>
    <member name="T:Linq2Rest.IModelFilter`1">
      <summary>
            Defines the public interface for a model filter.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
    </member>
    <member name="M:Linq2Rest.IModelFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Filters the passed collection with the defined filter.
            </summary>
      <param name="source">The source items to filter.</param>
      <returns>A filtered enumeration and projected of the source items.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.HttpRequestFactory">
      <summary>
            Creates a basic IHttpRequest.
            </summary>
    </member>
    <member name="T:Linq2Rest.Provider.IHttpRequestFactory">
      <summary>
            Defines the public interface for a Lin2Rest.Provider.IHttpRequest object factory.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)">
      <summary>
            Creates an IHttpRequest that can be used to send an http request.
            </summary>
      <param name="uri">The location the request is to be sent to.</param>
      <param name="method">The method to use to send the request.</param>
      <param name="responseMimeType">The Mime type we accept in response.</param>
      <param name="requestMimeType">The Mime type we are sending in request.</param>
      <returns>The HttpRequest we are creating.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="responseMimeType != null" vb="responseMimeType &lt;&gt; Nothing">responseMimeType != null</requires>
      <exception cref="T:System.ArgumentNullException">responseMimeType == null</exception>
      <requires exception="T:System.ArgumentException" csharp="method != (Linq2Rest.Provider.HttpMethod)0" vb="method &lt;&gt; ((Linq2Rest.Provider.HttpMethod)0)">method != (Linq2Rest.Provider.HttpMethod)0</requires>
      <exception cref="T:System.ArgumentException">method == (Linq2Rest.Provider.HttpMethod)0</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.HttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)">
      <summary>
            Creates an IHttpRequest that can be used to send an http request.
            </summary>
      <param name="uri">The location the request is to be sent to.</param>
      <param name="method">The method to use to send the request.</param>
      <param name="responseMimeType">The Mime type we accept in response.</param>
      <param name="requestMimeType">The Mime type we are sending in request.</param>
      <returns>The HttpRequest we are creating.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)" inheritedFromTypeName="IHttpRequestFactory" exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)" inheritedFromTypeName="IHttpRequestFactory" exception="T:System.ArgumentNullException" csharp="responseMimeType != null" vb="responseMimeType &lt;&gt; Nothing">responseMimeType != null</requires>
      <exception cref="T:System.ArgumentNullException">responseMimeType == null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)" inheritedFromTypeName="IHttpRequestFactory" exception="T:System.ArgumentException" csharp="method != (Linq2Rest.Provider.HttpMethod)0" vb="method &lt;&gt; ((Linq2Rest.Provider.HttpMethod)0)">method != (Linq2Rest.Provider.HttpMethod)0</requires>
      <exception cref="T:System.ArgumentException">method == (Linq2Rest.Provider.HttpMethod)0</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.HttpRequestFactoryWithCertificate">
      <summary>
            Creates an IHttpRequest with the given certificate attached to it.
            </summary>
    </member>
    <member name="M:Linq2Rest.Implementations.HttpRequestFactoryWithCertificate.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.HttpRequestFactoryWithCertificate" /> class. 
            </summary>
      <param name="clientCertificate">The client certificate to pass with the http request.</param>
    </member>
    <member name="M:Linq2Rest.Implementations.HttpRequestFactoryWithCertificate.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)">
      <summary>
            Creates an IHttpRequest that can be used to send an http request.
            </summary>
      <param name="uri">The location the request is to be sent to.</param>
      <param name="method">The method to use to send the request.</param>
      <param name="responseMimeType">The Mime type we accept in response.</param>
      <param name="requestMimeType">The Mime type we are sending in request.</param>
      <returns>The HttpRequest we are creating.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)" inheritedFromTypeName="IHttpRequestFactory" exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)" inheritedFromTypeName="IHttpRequestFactory" exception="T:System.ArgumentNullException" csharp="responseMimeType != null" vb="responseMimeType &lt;&gt; Nothing">responseMimeType != null</requires>
      <exception cref="T:System.ArgumentNullException">responseMimeType == null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IHttpRequestFactory.Create(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)" inheritedFromTypeName="IHttpRequestFactory" exception="T:System.ArgumentException" csharp="method != (Linq2Rest.Provider.HttpMethod)0" vb="method &lt;&gt; ((Linq2Rest.Provider.HttpMethod)0)">method != (Linq2Rest.Provider.HttpMethod)0</requires>
      <exception cref="T:System.ArgumentException">method == (Linq2Rest.Provider.HttpMethod)0</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.HttpWebRequestAdapter">
      <summary>
            Takes a System.Net.HttpWebRequest and wraps it in an IHttpRequest Implementation.
            </summary>
    </member>
    <member name="T:Linq2Rest.Provider.IHttpRequest">
      <summary>
            Defines the public interface for an HttpRequest.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.IHttpRequest.GetRequestStream">
      <summary>
            Gets a System.IO.Stream object to write request data.
            </summary>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.CanWrite" vb="result.CanWrite">result.CanWrite</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.IHttpRequest.GetResponseStream">
      <summary>
            Gets a System.IO.Stream object containing the response to the request.
            </summary>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="result.CanRead" vb="result.CanRead">result.CanRead</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.HttpWebRequestAdapter.CreateHttpWebRequest(System.Uri,Linq2Rest.Provider.HttpMethod,System.String,System.String)">
      <summary>
            Creates a basic HttpWebRequest that can then be built off of depending on what other functionality is needed.
            </summary>
      <param name="uri">The uri to send the request to.</param>
      <param name="method">The Http Request Method.</param>
      <param name="requestMimeType">The MIME type of the data we are sending.</param>
      <param name="responseMimeType">The MIME we accept in response.</param>
      <returns>Returns an HttpWebRequest initialized with the given parameters.</returns>
      <requires csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <requires csharp="responseMimeType != null" vb="responseMimeType &lt;&gt; Nothing">responseMimeType != null</requires>
      <requires csharp="method != (Linq2Rest.Provider.HttpMethod)0" vb="method &lt;&gt; ((Linq2Rest.Provider.HttpMethod)0)">method != (Linq2Rest.Provider.HttpMethod)0</requires>
    </member>
    <member name="P:Linq2Rest.Implementations.HttpWebRequestAdapter.HttpWebRequest">
      <summary>
            The HttpWebRequest we are adapting to IHttpRequest.
            </summary>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonContext`1">
      <summary>
            Defines the JsonContext class.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the item returned from the service.</typeparam>
    </member>
    <member name="T:Linq2Rest.Provider.RestContext`1">
      <summary>
            Defines the RestContext.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of object to query.</typeparam>
      <invariant>_getQueryable != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestContext`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Provider.RestContext`1" /> class.
            </summary>
      <param name="client" />
      <param name="serializerFactory" />
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestContext`1.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Linq2Rest.Provider.RestContext`1.Query">
      <summary>
            Gets the context query.
            </summary>
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonContext`1.#ctor(System.Uri,System.Type[])">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.JsonContext`1" /> class. 
            </summary>
      <param name="source">The <see cref="T:System.Uri" /> of the resource collection.</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> to be known by the serializer.</param>
      <requires exception="T:System.ArgumentNullException" csharp="source != (System.Uri)null" vb="source &lt;&gt; ((System.Uri)Nothing) ">source != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!source != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
      <requires exception="T:System.ArgumentException" csharp="source.Scheme == System.Uri.UriSchemeHttp || source.Scheme == System.Uri.UriSchemeHttps" vb="source.Scheme = System.Uri.UriSchemeHttp  OrElse source.Scheme = System.Uri.UriSchemeHttps ">source.Scheme == System.Uri.UriSchemeHttp || source.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!source.Scheme == System.Uri.UriSchemeHttp ? !source.Scheme == System.Uri.UriSchemeHttps : !true</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonDataContractSerializerFactory">
      <summary>
            Defines the JsonDataContractSerializer factory.
            </summary>
      <invariant>_knownTypes != null</invariant>
    </member>
    <member name="T:Linq2Rest.Provider.ISerializerFactory">
      <summary>
            Defines the public interface for a factory of <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.ISerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.JsonDataContractSerializerFactory" /> class.
            </summary>
      <param name="knownTypes">A number of known types for serialization resolution.</param>
      <requires exception="T:System.ArgumentNullException" csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures inheritedFrom="M:Linq2Rest.Provider.ISerializerFactory.Create``1" inheritedFromTypeName="ISerializerFactory" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Linq2Rest.Provider.ISerializer`1">
      <summary>
            Defines the public interface for an object serializer.
            </summary>
      <typeparam name="T" />
    </member>
    <member name="M:Linq2Rest.Provider.ISerializer`1.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes a single item.
            </summary>
      <param name="input">The serialized item.</param>
      <returns>An instance of the serialized item.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.ISerializer`1.DeserializeList(System.IO.Stream)">
      <summary>
            Deserializes a list of items.
            </summary>
      <param name="input">The serialized items.</param>
      <returns>An list of the serialized items.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.ISerializer`1.Serialize(`0)">
      <summary>
            Serializes the passed item into a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="item">The item to serialize.</param>
      <returns>A <see cref="T:System.IO.Stream" /> representation of the item.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)item, null)" vb="Not ReferenceEquals(((Object)item), Nothing)">!object.ReferenceEquals((object)item, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)item, null)</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.RestClientBase">
      <summary>
            Defines the base REST client implementation.
            </summary>
      <invariant>_acceptHeader != null</invariant>
    </member>
    <member name="T:Linq2Rest.Provider.IRestClient">
      <summary>
            Defines the public interface for a REST client.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)">
      <summary>
            Gets a service response.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>A string representation of the resource.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.IRestClient.Post(System.Uri,System.IO.Stream)">
      <summary>
            Posts the passed data to the service.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <param name="input">The <see cref="T:System.IO.Stream" /> representation to post.</param>
      <returns>The service response as a <see cref="T:System.IO.Stream" />.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <requires exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.IRestClient.Put(System.Uri,System.IO.Stream)">
      <summary>
            Puts the passed data to the service.
            </summary>
      <param name="input">The <see cref="T:System.IO.Stream" /> representation to put.</param>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>The service response as a <see cref="T:System.IO.Stream" />.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <requires exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.IRestClient.Delete(System.Uri)">
      <summary>
            Deletes the resource at the service.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>The service response as a <see cref="T:System.IO.Stream" />.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.IRestClient.ServiceBase">
      <summary>
            Gets the base <see cref="T:System.Uri" /> for the REST service.
            </summary>
      <getter>
        <ensures csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
        <ensures csharp="result.Scheme == System.Uri.UriSchemeHttp || result.Scheme == System.Uri.UriSchemeHttps" vb="result.Scheme = System.Uri.UriSchemeHttp  OrElse result.Scheme = System.Uri.UriSchemeHttps ">result.Scheme == System.Uri.UriSchemeHttp || result.Scheme == System.Uri.UriSchemeHttps</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.#ctor(System.Uri,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.RestClientBase" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <param name="acceptHeader">The accept header to use in web requests.</param>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.#ctor(System.Uri,System.String,Linq2Rest.Provider.IHttpRequestFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.RestClientBase" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <param name="acceptHeader">The accept header to use in web requests.</param>
      <param name="httpRequestFactory">The factory used to create Linq2Rest.Provider.IHttpRequest implementations.</param>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <requires exception="T:System.ArgumentException" csharp="!IsNullOrWhiteSpace(acceptHeader)" vb="Not IsNullOrWhiteSpace(acceptHeader)">!string.IsNullOrWhiteSpace(acceptHeader)</requires>
      <exception cref="T:System.ArgumentException">string.IsNullOrWhiteSpace(acceptHeader)</exception>
      <requires exception="T:System.ArgumentException" csharp="httpRequestFactory != null" vb="httpRequestFactory &lt;&gt; Nothing">httpRequestFactory != null</requires>
      <exception cref="T:System.ArgumentException">httpRequestFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Get(System.Uri)">
      <summary>
            Gets a service response.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>A string representation of the resource.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.Get(System.Uri)" inheritedFromTypeName="IRestClient" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Post(System.Uri,System.IO.Stream)">
      <summary>
            Posts the passed data to the service.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <param name="input">The <see cref="T:System.IO.Stream" /> representation to post.</param>
      <returns>The service response as a <see cref="T:System.IO.Stream" />.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Post(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Post(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Post(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.Post(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Put(System.Uri,System.IO.Stream)">
      <summary>
            Puts the passed data to the service.
            </summary>
      <param name="input">The <see cref="T:System.IO.Stream" /> representation to put.</param>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>The service response as a <see cref="T:System.IO.Stream" />.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Put(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Put(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Put(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.Put(System.Uri,System.IO.Stream)" inheritedFromTypeName="IRestClient" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Delete(System.Uri)">
      <summary>
            Deletes the resource at the service.
            </summary>
      <param name="uri">The <see cref="T:System.Uri" /> to load the resource from.</param>
      <returns>The service response as a <see cref="T:System.IO.Stream" />.</returns>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Delete(System.Uri)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires inheritedFrom="M:Linq2Rest.Provider.IRestClient.Delete(System.Uri)" inheritedFromTypeName="IRestClient" exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.Delete(System.Uri)" inheritedFromTypeName="IRestClient" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Linq2Rest.Implementations.RestClientBase.Dispose(System.Boolean)">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <param name="disposing">True if disposing managed types.</param>
    </member>
    <member name="P:Linq2Rest.Implementations.RestClientBase.ServiceBase">
      <summary>
            Gets the base <see cref="T:System.Uri" /> for the REST service.
            </summary>
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.get_ServiceBase" inheritedFromTypeName="IRestClient" csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
        <ensures inheritedFrom="M:Linq2Rest.Provider.IRestClient.get_ServiceBase" inheritedFromTypeName="IRestClient" csharp="result.Scheme == System.Uri.UriSchemeHttp || result.Scheme == System.Uri.UriSchemeHttps" vb="result.Scheme = System.Uri.UriSchemeHttp  OrElse result.Scheme = System.Uri.UriSchemeHttps ">result.Scheme == System.Uri.UriSchemeHttp || result.Scheme == System.Uri.UriSchemeHttps</ensures>
      </getter>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlContext`1">
      <summary>
            Defines the XmlContext class.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of the item returned from the service.</typeparam>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlContext`1.#ctor(System.Uri,System.Type[])">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlContext`1" /> class. 
            </summary>
      <param name="source">The <see cref="T:System.Uri" /> of the resource collection.</param>
      <param name="knownTypes">
        <see cref="T:System.Type" /> to be known by the serializer.</param>
      <requires exception="T:System.ArgumentNullException" csharp="source != (System.Uri)null" vb="source &lt;&gt; ((System.Uri)Nothing) ">source != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!source != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
      <requires exception="T:System.ArgumentException" csharp="source.Scheme == System.Uri.UriSchemeHttp || source.Scheme == System.Uri.UriSchemeHttps" vb="source.Scheme = System.Uri.UriSchemeHttp  OrElse source.Scheme = System.Uri.UriSchemeHttps ">source.Scheme == System.Uri.UriSchemeHttp || source.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!source.Scheme == System.Uri.UriSchemeHttp ? !source.Scheme == System.Uri.UriSchemeHttps : !true</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlDataContractSerializerFactory">
      <summary>
            Defines the XmlDataContractSerializer factory.
            </summary>
      <invariant>_knownTypes != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlDataContractSerializerFactory" /> class.
            </summary>
      <param name="knownTypes">A number of known types for serialization resolution.</param>
      <requires exception="T:System.ArgumentNullException" csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures inheritedFrom="M:Linq2Rest.Provider.ISerializerFactory.Create``1" inheritedFromTypeName="ISerializerFactory" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlRestClient">
      <summary>
            Defines a REST client implementation for JSON requests.
            </summary>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlRestClient.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlRestClient" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlSerializerFactory">
      <summary>
            Defines the XmlSerializer factory.
            </summary>
      <invariant>_knownTypes != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.XmlSerializerFactory" /> class.
            </summary>
      <param name="knownTypes">A number of known types for serialization resolution.</param>
      <requires exception="T:System.ArgumentNullException" csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
      <exception cref="T:System.ArgumentNullException">knownTypes == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.Create``1">
      <summary>
            Creates an instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.
            </summary>
      <typeparam name="T">The item type for the serializer.</typeparam>
      <returns>An instance of an <see cref="T:Linq2Rest.Provider.ISerializer`1" />.</returns>
      <ensures inheritedFrom="M:Linq2Rest.Provider.ISerializerFactory.Create``1" inheritedFromTypeName="ISerializerFactory" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Linq2Rest.IRuntimeTypeProvider">
      <summary>
            Provides a type matching the provided members.
            </summary>
    </member>
    <member name="M:Linq2Rest.IRuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
            Gets the <see cref="T:System.Type" /> matching the provided members.
            </summary>
      <param name="sourceType">The <see cref="T:System.Type" /> to generate the runtime type from.</param>
      <param name="properties">The <see cref="T:System.Reflection.MemberInfo" /> to use to generate properties.</param>
      <returns>A <see cref="T:System.Type" /> mathing the provided properties.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="sourceType != (System.Type)null" vb="sourceType &lt;&gt; ((System.Type)Nothing) ">sourceType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">!sourceType != (System.Type)null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="properties != null" vb="properties &lt;&gt; Nothing">properties != null</requires>
      <exception cref="T:System.ArgumentNullException">properties == null</exception>
    </member>
    <member name="T:Linq2Rest.ModelFilterExtensions">
      <summary>
            Defines extension methods for model filters.
            </summary>
    </member>
    <member name="M:Linq2Rest.ModelFilterExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Specialized.NameValueCollection)">
      <summary>
            Filters the source collection using the passed query parameters.
            </summary>
      <param name="source">The source items to filter.</param>
      <param name="query">The query parameters defining the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of items in the source collection.</typeparam>
      <returns>A filtered and projected enumeration of the source collection.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="query != null" vb="query &lt;&gt; Nothing">query != null</requires>
      <exception cref="T:System.ArgumentNullException">query == null</exception>
    </member>
    <member name="M:Linq2Rest.ModelFilterExtensions.Filter``1(System.Collections.Generic.IEnumerable{``0},Linq2Rest.IModelFilter{``0})">
      <summary>
            Filters the source collection using the passed query parameters.
            </summary>
      <param name="source">The source items to filter.</param>
      <param name="filter">The filter to apply.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of items in the source collection.</typeparam>
      <returns>A filtered and projected enumeration of the source collection.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.FilterExpressionFactory">
      <summary>
            Defines the FilterExpressionFactory.
            </summary>
    </member>
    <member name="T:Linq2Rest.Parser.IFilterExpressionFactory">
      <summary>
            Defines the public interface for a FilterExpressionFactory.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.IFilterExpressionFactory.Create``1(System.String)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="M:Linq2Rest.Parser.IFilterExpressionFactory.Create``1(System.String,System.IFormatProvider)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when reading the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.Create``1(System.String)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.Create``1(System.String,System.IFormatProvider)">
      <summary>
            Creates a filter expression from its string representation.
            </summary>
      <param name="filter">The string representation of the filter.</param>
      <param name="formatProvider">The <see cref="T:System.IFormatProvider" /> to use when reading the filter.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to filter.</typeparam>
      <returns>An <see cref="T:System.Linq.Expressions.Expression`1" /> if the passed filter is valid, otherwise null.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.FilterExpressionFactory.ParameterVisitor">
      <summary>
            Used to get the ParameterExpressions used in an Expression so that Expression.Call will have the correct number of parameters supplied.
            </summary>
    </member>
    <member name="T:Linq2Rest.Parser.IMemberNameResolver">
      <summary>
            Defines the public interface for a resolver of <see cref="T:System.Reflection.MemberInfo" /> name.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.IMemberNameResolver.ResolveName(System.Reflection.MemberInfo)">
      <summary>
            Returns the resolved name for the <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to resolve the name of.</param>
      <returns>The resolved name.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="member != (System.Reflection.MemberInfo)null" vb="member &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">member != (System.Reflection.MemberInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">!member != (System.Reflection.MemberInfo)null</exception>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Linq2Rest.Parser.IParameterParser`1">
      <summary>
            Defines the public interface for a parameter parser.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of object to parse parameters for.</typeparam>
    </member>
    <member name="M:Linq2Rest.Parser.IParameterParser`1.Parse(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Parses the passes parameters into a <see cref="T:Linq2Rest.ModelFilter`1" />.
            </summary>
      <param name="queryParameters">The parameters to parse.</param>
      <returns>A <see cref="T:Linq2Rest.ModelFilter`1" /> representing the restrictions in the parameters.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="queryParameters != null" vb="queryParameters &lt;&gt; Nothing">queryParameters != null</requires>
      <exception cref="T:System.ArgumentNullException">queryParameters == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.ISelectExpressionFactory`1">
      <summary>
            Defines the public interface for a SelectExpressionFactory.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> to create expression for.</typeparam>
    </member>
    <member name="M:Linq2Rest.Parser.ISelectExpressionFactory`1.Create(System.String)">
      <summary>
            Creates a select expression.
            </summary>
      <param name="selection">The properties to select.</param>
      <returns>An instance of a <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.ISortExpressionFactory">
      <summary>
            Defines the public interface for a SortExpressionFactory.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.ISortExpressionFactory.Create``1(System.String)">
      <summary>
            Creates an enumeration of sort descriptions from its string representation.
            </summary>
      <param name="filter">The string representation of the sort descriptions.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to sort.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> if the passed sort descriptions are valid, otherwise null.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.ParameterParser`1">
      <summary>
            Defines the default implementation of a parameter parser.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to create parser for.</typeparam>
      <invariant>_filterExpressionFactory != null</invariant>
      <invariant>_sortExpressionFactory != null</invariant>
      <invariant>_selectExpressionFactory != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.ParameterParser`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.ParameterParser`1" /> class.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.ParameterParser`1.#ctor(Linq2Rest.Parser.IFilterExpressionFactory,Linq2Rest.Parser.ISortExpressionFactory,Linq2Rest.Parser.ISelectExpressionFactory{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.ParameterParser`1" /> class.
            </summary>
      <param name="filterExpressionFactory">The <see cref="T:Linq2Rest.Parser.IFilterExpressionFactory" /> to use.</param>
      <param name="sortExpressionFactory">The <see cref="T:Linq2Rest.Parser.ISortExpressionFactory" /> to use.</param>
      <param name="selectExpressionFactory">The <see cref="T:Linq2Rest.Parser.ISelectExpressionFactory`1" /> to use.</param>
      <requires exception="T:System.ArgumentNullException" csharp="filterExpressionFactory != null" vb="filterExpressionFactory &lt;&gt; Nothing">filterExpressionFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">filterExpressionFactory == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="sortExpressionFactory != null" vb="sortExpressionFactory &lt;&gt; Nothing">sortExpressionFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">sortExpressionFactory == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="selectExpressionFactory != null" vb="selectExpressionFactory &lt;&gt; Nothing">selectExpressionFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">selectExpressionFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.ParameterParser`1.Parse(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Parses the passes query parameters to a <see cref="T:Linq2Rest.ModelFilter`1" />.
            </summary>
      <param name="queryParameters" />
      <returns />
      <requires inheritedFrom="M:Linq2Rest.Parser.IParameterParser`1.Parse(System.Collections.Specialized.NameValueCollection)" inheritedFromTypeName="IParameterParser" exception="T:System.ArgumentNullException" csharp="queryParameters != null" vb="queryParameters &lt;&gt; Nothing">queryParameters != null</requires>
      <exception cref="T:System.ArgumentNullException">queryParameters == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.SelectExpressionFactory`1">
      <summary>
            Defines the SelectExpressionFactory.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> of object to project.</typeparam>
      <invariant>_knownSelections != null</invariant>
      <invariant>_nameResolver != null</invariant>
      <invariant>_runtimeTypeProvider != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.SelectExpressionFactory`1.#ctor(Linq2Rest.Parser.IMemberNameResolver,Linq2Rest.IRuntimeTypeProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.SelectExpressionFactory`1" /> class.
            </summary>
      <requires exception="T:System.ArgumentNullException" csharp="nameResolver != null" vb="nameResolver &lt;&gt; Nothing">nameResolver != null</requires>
      <exception cref="T:System.ArgumentNullException">nameResolver == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="runtimeTypeProvider != null" vb="runtimeTypeProvider &lt;&gt; Nothing">runtimeTypeProvider != null</requires>
      <exception cref="T:System.ArgumentNullException">runtimeTypeProvider == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.SelectExpressionFactory`1.Create(System.String)">
      <summary>
            Creates a select expression.
            </summary>
      <param name="selection">The properties to select.</param>
      <returns>An instance of a <see cref="T:System.Func`2" />.</returns>
    </member>
    <member name="T:Linq2Rest.Parser.SortDescription`1">
      <summary>
            Defines a sort description.
            </summary>
      <typeparam name="T">The <see cref="T:System.Type" /> to sort.</typeparam>
      <invariant>_keySelector != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.SortDescription`1.#ctor(System.Linq.Expressions.Expression,System.Web.UI.WebControls.SortDirection)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Parser.SortDescription`1" /> class.
            </summary>
      <param name="keySelector">The function to select the sort key.</param>
      <param name="direction">The sort direction.</param>
      <requires exception="T:System.ArgumentNullException" csharp="keySelector != null" vb="keySelector &lt;&gt; Nothing">keySelector != null</requires>
      <exception cref="T:System.ArgumentNullException">keySelector == null</exception>
    </member>
    <member name="P:Linq2Rest.Parser.SortDescription`1.Direction">
      <summary>
            Gets the sort direction.
            </summary>
    </member>
    <member name="P:Linq2Rest.Parser.SortDescription`1.KeySelector">
      <summary>
            Gets the key to sort by.
            </summary>
    </member>
    <member name="T:Linq2Rest.Parser.SortExpressionFactory">
      <summary>
            Defines the SortExpressionFactory´.
            </summary>
    </member>
    <member name="M:Linq2Rest.Parser.SortExpressionFactory.Create``1(System.String)">
      <summary>
            Creates an enumeration of sort descriptions from its string representation.
            </summary>
      <param name="filter">The string representation of the sort descriptions.</param>
      <typeparam name="T">The <see cref="T:System.Type" /> of item to sort.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> if the passed sort descriptions are valid, otherwise null.</returns>
    </member>
    <member name="T:Linq2Rest.Provider.IExpressionWriter">
      <summary>
            Defines the public interface for an expression visitor.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.IExpressionWriter.Write(System.Linq.Expressions.Expression)">
      <summary>
            Generates a string representation of the passed expression.
            </summary>
      <param name="expression">The <see cref="T:System.Linq.Expressions.Expression" /> to visit.</param>
      <returns>A string value.</returns>
    </member>
    <member name="T:Linq2Rest.Provider.HttpRequestExtensions">
      <summary>
            Extensions on the IHttpRequest interface (aka Extension Interface Pattern). 
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.HttpRequestExtensions.WriteRequestStream(Linq2Rest.Provider.IHttpRequest,System.IO.Stream)">
      <summary>
            Writes a stream to the request stream of an IHttpRequest implementation.
            </summary>
      <param name="httpRequest">The request we are writing our stream to.</param>
      <param name="inputStream">The stream we want to write to our request.</param>
      <requires csharp="httpRequest != null" vb="httpRequest &lt;&gt; Nothing">httpRequest != null</requires>
      <requires csharp="inputStream != null" vb="inputStream &lt;&gt; Nothing">inputStream != null</requires>
    </member>
    <member name="T:Linq2Rest.Provider.HttpMethod">
      <summary>
            Defines the public enumeration of supported HTTP methods.
            </summary>
    </member>
    <member name="F:Linq2Rest.Provider.HttpMethod.None">
      <summary>
            Shouldn't ever be explicitly used. Here as a default.
            </summary>
    </member>
    <member name="F:Linq2Rest.Provider.HttpMethod.Get">
      <summary>
            Represents the GET HTTP method.
            </summary>
    </member>
    <member name="F:Linq2Rest.Provider.HttpMethod.Put">
      <summary>
            Represents the PUT HTTP method.
            </summary>
    </member>
    <member name="F:Linq2Rest.Provider.HttpMethod.Post">
      <summary>
            Represents the POST HTTP method.
            </summary>
    </member>
    <member name="F:Linq2Rest.Provider.HttpMethod.Delete">
      <summary>
            Represents the DELETE HTTP method.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.SerializerContracts`1.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes a single item.
            </summary>
      <param name="input">The serialized item.</param>
      <returns>An instance of the serialized item.</returns>
    </member>
    <member name="M:Linq2Rest.Provider.SerializerContracts`1.DeserializeList(System.IO.Stream)">
      <summary>
            Deserializes a list of items.
            </summary>
      <param name="input">The serialized items.</param>
      <returns>An list of the serialized items.</returns>
    </member>
    <member name="M:Linq2Rest.Provider.SerializerContracts`1.Serialize(`0)">
      <summary>
            Serializes the passed item into a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="item">The item to serialize.</param>
      <returns>A <see cref="T:System.IO.Stream" /> representation of the item.</returns>
    </member>
    <member name="T:Linq2Rest.Provider.ODataExpressionConverter">
      <summary>
            Converts LINQ expressions to OData queries.
            </summary>
      <invariant>_writer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.ODataExpressionConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Provider.ODataExpressionConverter" /> class.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.ODataExpressionConverter.Convert``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
            Converts an expression into an OData formatted query.
            </summary>
      <param name="expression">The expression to convert.</param>
      <returns>An OData <see cref="T:System.String" /> representation.</returns>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonRestClient">
      <summary>
            Defines a REST client implementation for JSON requests.
            </summary>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonRestClient.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.JsonRestClient" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonRestClient.#ctor(System.Uri,Linq2Rest.Provider.IHttpRequestFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.Implementations.JsonRestClient" /> class.
            </summary>
      <param name="uri">The base <see cref="T:System.Uri" /> for the REST service.</param>
      <param name="httpRequestFactory">The factory to use to create our HTTP Requests.</param>
      <requires exception="T:System.ArgumentNullException" csharp="uri != (System.Uri)null" vb="uri &lt;&gt; ((System.Uri)Nothing) ">uri != (System.Uri)null</requires>
      <exception cref="T:System.ArgumentNullException">!uri != (System.Uri)null</exception>
      <requires exception="T:System.ArgumentException" csharp="uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps" vb="uri.Scheme = System.Uri.UriSchemeHttp  OrElse uri.Scheme = System.Uri.UriSchemeHttps ">uri.Scheme == System.Uri.UriSchemeHttp || uri.Scheme == System.Uri.UriSchemeHttps</requires>
      <exception cref="T:System.ArgumentException">!uri.Scheme == System.Uri.UriSchemeHttp ? !uri.Scheme == System.Uri.UriSchemeHttps : !true</exception>
      <requires exception="T:System.ArgumentException" csharp="httpRequestFactory != null" vb="httpRequestFactory &lt;&gt; Nothing">httpRequestFactory != null</requires>
      <exception cref="T:System.ArgumentException">httpRequestFactory == null</exception>
    </member>
    <member name="T:Linq2Rest.Provider.QueryableExtensions">
      <summary>
            Defines extension methods on IQueryables.
            </summary>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.ExecuteAsync``1(System.Linq.IQueryable{``0})">
      <summary>
            Creates a task to execute the query.
            </summary>
      <param name="queryable">The <see cref="T:System.Linq.IQueryable`1" /> to execute.</param>
      <typeparam name="T">The generic type parameter.</typeparam>
      <returns>A task returning the query result.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="new Linq2Rest.Provider.QueryableExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){&#xD;&#xA;    queryable = queryable, &#xD;&#xA;}.queryable != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Provider.QueryableExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt; local_0_prime = New Linq2Rest.Provider.QueryableExtensions.&lt;&gt;c__DisplayClass1(Of T)();&#xD;&#xA;    (local_0_prime.queryable = queryable)&#xD;&#xA;    return local_0_prime; })().queryable &lt;&gt; Nothing">new Linq2Rest.Provider.QueryableExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){
    queryable = queryable, 
}.queryable != null</requires>
      <exception cref="T:System.ArgumentNullException">new Linq2Rest.Provider.QueryableExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){
    queryable = queryable, 
}.queryable == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Expand``1(System.Linq.IQueryable{``0},System.String)">
      <summary>
            Expands the specified source.
            </summary>
      <typeparam name="TSource" />
      <param name="source">The source.</param>
      <param name="paths">The paths to expand in the format "Child1, Child2/GrandChild2".</param>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> for continued querying.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Expand``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
      <summary>
            Expands the specified source.
            </summary>
      <typeparam name="TSource" />
      <param name="source">The source.</param>
      <param name="properties">The paths to expand.</param>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> for continued querying.</returns>
      <requires exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Post``2(System.Linq.IQueryable{``0},``1)">
      <summary>
            Creates a queryable source where the passed input will be posted to the REST service to create the result.
            </summary>
      <param name="source">The source <see cref="T:System.Linq.IQueryable`1" /></param>
      <param name="input">The data to post to the server.</param>
      <typeparam name="TResult">The response <see cref="T:System.Type" />.</typeparam>
      <typeparam name="TInput">The <see cref="T:System.Type" /> of the input data.</typeparam>
      <returns />
      <requires exception="T:System.ArgumentException" csharp="!ReferenceEquals((object)input, null)" vb="Not ReferenceEquals(((Object)input), Nothing)">!object.ReferenceEquals((object)input, null)</requires>
      <exception cref="T:System.ArgumentException">object.ReferenceEquals((object)input, null)</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Put``2(System.Linq.IQueryable{``0},``1)">
      <summary>
            Creates a queryable source where the passed input will be put to the REST service to create the result.
            </summary>
      <param name="source">The source <see cref="T:System.Linq.IQueryable`1" /></param>
      <param name="input">The data to put to the server.</param>
      <typeparam name="TResult">The response <see cref="T:System.Type" />.</typeparam>
      <typeparam name="TInput">The <see cref="T:System.Type" /> of the input data.</typeparam>
      <returns />
      <requires exception="T:System.ArgumentException" csharp="!ReferenceEquals((object)input, null)" vb="Not ReferenceEquals(((Object)input), Nothing)">!object.ReferenceEquals((object)input, null)</requires>
      <exception cref="T:System.ArgumentException">object.ReferenceEquals((object)input, null)</exception>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.Delete``1(System.Linq.IQueryable{``0})">
      <summary>
            Creates a queryable source where the passed input will be put to the REST service to create the result.
            </summary>
      <param name="source">The source <see cref="T:System.Linq.IQueryable`1" /></param>
      <typeparam name="TResult">The response <see cref="T:System.Type" />.</typeparam>
      <returns />
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryableBase`1.ElementType">
      <summary>
        <see cref="T:System.Type" /> of T in IQueryable of T.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_ElementType" inheritedFromTypeName="IQueryable" csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryableBase`1.Expression">
      <summary>
            	The expression tree.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_Expression" inheritedFromTypeName="IQueryable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryableBase`1.Provider">
      <summary>
            	IQueryProvider part of RestQueryable.
            </summary>
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_Provider" inheritedFromTypeName="IQueryable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="T:Linq2Rest.RuntimeTypeProvider">
      <summary>
            Defines the RuntimeTypeProvider.
            </summary>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.#ctor(Linq2Rest.Parser.IMemberNameResolver)">
      <summary>
            Initializes a new instance of the <see cref="T:Linq2Rest.RuntimeTypeProvider" /> class.
            </summary>
      <param name="nameResolver" />
      <requires csharp="nameResolver != null" vb="nameResolver &lt;&gt; Nothing">nameResolver != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>
            Gets the <see cref="T:System.Type" /> matching the provided members.
            </summary>
      <param name="sourceType">The <see cref="T:System.Type" /> to generate the runtime type from.</param>
      <param name="properties">The <see cref="T:System.Reflection.MemberInfo" /> to use to generate properties.</param>
      <returns>A <see cref="T:System.Type" /> mathing the provided properties.</returns>
      <requires inheritedFrom="M:Linq2Rest.IRuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" inheritedFromTypeName="IRuntimeTypeProvider" exception="T:System.ArgumentNullException" csharp="sourceType != (System.Type)null" vb="sourceType &lt;&gt; ((System.Type)Nothing) ">sourceType != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">!sourceType != (System.Type)null</exception>
      <requires inheritedFrom="M:Linq2Rest.IRuntimeTypeProvider.Get(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" inheritedFromTypeName="IRuntimeTypeProvider" exception="T:System.ArgumentNullException" csharp="properties != null" vb="properties &lt;&gt; Nothing">properties != null</requires>
      <exception cref="T:System.ArgumentNullException">properties == null</exception>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.IsAnonymousType(System.Type)">
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">!type != (System.Type)null</exception>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.Capitalize(System.String)">
      <requires csharp="!IsNullOrEmpty(input)" vb="Not IsNullOrEmpty(input)">!string.IsNullOrEmpty(input)</requires>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.ToStream(System.String)">
      <requires csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.GetPublicProperties(System.Type)">
      <requires exception="T:System.ArgumentNullException" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
      <exception cref="T:System.ArgumentNullException">!type != (System.Type)null</exception>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="keySelector != null" vb="keySelector &lt;&gt; Nothing">keySelector != null</requires>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.OrderByDescending``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="keySelector != null" vb="keySelector &lt;&gt; Nothing">keySelector != null</requires>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.ThenBy``1(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="keySelector != null" vb="keySelector &lt;&gt; Nothing">keySelector != null</requires>
    </member>
    <member name="M:Linq2Rest.GeneralExtensions.ThenByDescending``1(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="keySelector != null" vb="keySelector &lt;&gt; Nothing">keySelector != null</requires>
    </member>
    <member name="T:Linq2Rest.UntypedQueryable`1">
      <invariant>_source != null</invariant>
    </member>
    <member name="M:Linq2Rest.UntypedQueryable`1.#ctor(System.Linq.IQueryable{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <requires csharp="projection == default(System.Linq.Expressions.Expression&lt;System.Func&lt;T, object&gt;&gt;) || source != null" vb="projection = Nothing OrElse source &lt;&gt; Nothing">projection == default(System.Linq.Expressions.Expression&lt;System.Func&lt;T, object&gt;&gt;) || source != null</requires>
    </member>
    <member name="M:Linq2Rest.UntypedQueryable`1.GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:Linq2Rest.UntypedQueryable`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="P:Linq2Rest.UntypedQueryable`1.Expression">
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_Expression" inheritedFromTypeName="IQueryable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.UntypedQueryable`1.ElementType">
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_ElementType" inheritedFromTypeName="IQueryable" csharp="result != (System.Type)null" vb="result &lt;&gt; ((System.Type)Nothing) ">result != (System.Type)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.UntypedQueryable`1.Provider">
      <getter>
        <ensures inheritedFrom="M:System.Linq.IQueryable.get_Provider" inheritedFromTypeName="IQueryable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.CreateProperty(System.Reflection.Emit.TypeBuilder,System.Collections.Generic.KeyValuePair{System.String,System.Reflection.MemberInfo})">
      <requires csharp="typeBuilder != (System.Type)null" vb="typeBuilder &lt;&gt; ((System.Type)Nothing) ">typeBuilder != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.SetAttributes(System.Reflection.Emit.TypeBuilder,System.Type)">
      <requires csharp="typeBuilder != (System.Type)null" vb="typeBuilder &lt;&gt; ((System.Type)Nothing) ">typeBuilder != (System.Type)null</requires>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.SetAttributes(System.Reflection.Emit.PropertyBuilder,System.Reflection.MemberInfo)">
      <requires csharp="propertyBuilder != (System.Reflection.PropertyInfo)null" vb="propertyBuilder &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">propertyBuilder != (System.Reflection.PropertyInfo)null</requires>
      <requires csharp="memberInfo != (System.Reflection.MemberInfo)null" vb="memberInfo &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">memberInfo != (System.Reflection.MemberInfo)null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.CreateCustomAttributeBuilders(System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData})">
      <requires csharp="customAttributes != null" vb="customAttributes &lt;&gt; Nothing">customAttributes != null</requires>
    </member>
    <member name="M:Linq2Rest.RuntimeTypeProvider.GetTypeKey(System.Type,System.Collections.Generic.Dictionary{System.String,System.Reflection.MemberInfo})">
      <requires csharp="sourceType != (System.Type)null" vb="sourceType &lt;&gt; ((System.Type)Nothing) ">sourceType != (System.Type)null</requires>
      <requires csharp="fields != null" vb="fields &lt;&gt; Nothing">fields != null</requires>
    </member>
    <member name="M:Linq2Rest.Implementations.HttpWebRequestAdapter.GetRequestStream">
      <ensures inheritedFrom="M:Linq2Rest.Provider.IHttpRequest.GetRequestStream" inheritedFromTypeName="IHttpRequest" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IHttpRequest.GetRequestStream" inheritedFromTypeName="IHttpRequest" csharp="result.CanWrite" vb="result.CanWrite">result.CanWrite</ensures>
    </member>
    <member name="M:Linq2Rest.Implementations.HttpWebRequestAdapter.GetResponseStream">
      <ensures inheritedFrom="M:Linq2Rest.Provider.IHttpRequest.GetResponseStream" inheritedFromTypeName="IHttpRequest" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:Linq2Rest.Provider.IHttpRequest.GetResponseStream" inheritedFromTypeName="IHttpRequest" csharp="result.CanRead" vb="result.CanRead">result.CanRead</ensures>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1">
      <invariant>_serializer != null</invariant>
      <invariant>_listSerializer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <requires csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1.Deserialize(System.IO.Stream)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.Deserialize(System.IO.Stream)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1.DeserializeList(System.IO.Stream)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.DeserializeList(System.IO.Stream)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlDataContractSerializerFactory.XmlDataContractSerializer`1.Serialize(`0)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.Serialize(`0)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)item, null)" vb="Not ReferenceEquals(((Object)item), Nothing)">!object.ReferenceEquals((object)item, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)item, null)</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1">
      <invariant>_serializer != null</invariant>
      <invariant>_listSerializer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <requires csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1.Deserialize(System.IO.Stream)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.Deserialize(System.IO.Stream)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1.DeserializeList(System.IO.Stream)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.DeserializeList(System.IO.Stream)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.XmlSerializerFactory.XmlSerializer`1.Serialize(`0)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.Serialize(`0)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)item, null)" vb="Not ReferenceEquals(((Object)item), Nothing)">!object.ReferenceEquals((object)item, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)item, null)</exception>
    </member>
    <member name="T:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1">
      <invariant>_serializer != null</invariant>
      <invariant>_listSerializer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
      <requires csharp="knownTypes != null" vb="knownTypes &lt;&gt; Nothing">knownTypes != null</requires>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1.Deserialize(System.IO.Stream)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.Deserialize(System.IO.Stream)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1.DeserializeList(System.IO.Stream)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.DeserializeList(System.IO.Stream)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
      <exception cref="T:System.ArgumentNullException">input == null</exception>
    </member>
    <member name="M:Linq2Rest.Implementations.JsonDataContractSerializerFactory.JsonDataContractSerializer`1.Serialize(`0)">
      <requires inheritedFrom="M:Linq2Rest.Provider.ISerializer`1.Serialize(`0)" inheritedFromTypeName="ISerializer" exception="T:System.ArgumentNullException" csharp="!ReferenceEquals((object)item, null)" vb="Not ReferenceEquals(((Object)item), Nothing)">!object.ReferenceEquals((object)item, null)</requires>
      <exception cref="T:System.ArgumentNullException">object.ReferenceEquals((object)item, null)</exception>
    </member>
    <member name="M:Linq2Rest.MethodProvider.GetAnyAllMethod(System.String,System.Type)">
      <requires csharp="collectionType != (System.Type)null" vb="collectionType &lt;&gt; ((System.Type)Nothing) ">collectionType != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.MethodProvider.GetIEnumerableImpl(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.MethodProvider.GetGenericMethod(System.Type,System.String,System.Type[],System.Type[],System.Reflection.BindingFlags)">
      <requires csharp="new Linq2Rest.MethodProvider.&lt;&gt;c__DisplayClass5(){&#xD;&#xA;    name = name, &#xD;&#xA;    typeArgs = typeArgs, &#xD;&#xA;}.typeArgs != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.MethodProvider.&lt;&gt;c__DisplayClass5 local_1_prime = New Linq2Rest.MethodProvider.&lt;&gt;c__DisplayClass5();&#xD;&#xA;    (local_1_prime.name = name)&#xD;&#xA;    (local_1_prime.typeArgs = typeArgs)&#xD;&#xA;    return local_1_prime; })().typeArgs &lt;&gt; Nothing">new Linq2Rest.MethodProvider.&lt;&gt;c__DisplayClass5(){
    name = name, 
    typeArgs = typeArgs, 
}.typeArgs != null</requires>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.MethodProvider.IsIEnumerable(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="P:Linq2Rest.MethodProvider.IndexOfMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.ContainsMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.EndsWithMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.StartsWithMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.LengthProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.SubstringMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.ToLowerMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.ToUpperMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.TrimMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DayProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.HourProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.MinuteProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.SecondProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.MonthProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.YearProperty">
      <getter>
        <ensures csharp="result != (System.Reflection.PropertyInfo)null" vb="result &lt;&gt; ((System.Reflection.PropertyInfo)Nothing) ">result != (System.Reflection.PropertyInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DoubleRoundMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DecimalRoundMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DoubleFloorMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DecimalFloorMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DoubleCeilingMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.MethodProvider.DecimalCeilingMethod">
      <getter>
        <ensures csharp="result != (System.Reflection.MethodInfo)null" vb="result &lt;&gt; ((System.Reflection.MethodInfo)Nothing) ">result != (System.Reflection.MethodInfo)null</ensures>
      </getter>
    </member>
    <member name="T:Linq2Rest.Provider.ParameterBuilder">
      <invariant>_serviceBase != null</invariant>
      <invariant>_serviceBase.Scheme == Uri.UriSchemeHttp || _serviceBase.Scheme == Uri.UriSchemeHttps</invariant>
      <invariant>OrderByParameter != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.ParameterBuilder.#ctor(System.Uri)">
      <requires csharp="serviceBase != (System.Uri)null" vb="serviceBase &lt;&gt; ((System.Uri)Nothing) ">serviceBase != (System.Uri)null</requires>
      <requires csharp="serviceBase.Scheme == System.Uri.UriSchemeHttp || serviceBase.Scheme == System.Uri.UriSchemeHttps" vb="serviceBase.Scheme = System.Uri.UriSchemeHttp  OrElse serviceBase.Scheme = System.Uri.UriSchemeHttps ">serviceBase.Scheme == System.Uri.UriSchemeHttp || serviceBase.Scheme == System.Uri.UriSchemeHttps</requires>
      <ensures csharp="(System.Collections.ICollection)this.OrderByParameter.Count == 0" vb="((System.Collections.ICollection)Me.OrderByParameter).Count = 0">(System.Collections.ICollection)this.OrderByParameter.Count == 0</ensures>
      <ensures csharp="serviceBase == this._serviceBase" vb="serviceBase = Me._serviceBase ">serviceBase == this._serviceBase</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.ParameterBuilder.GetFullUri">
      <ensures csharp="result != (System.Uri)null" vb="result &lt;&gt; ((System.Uri)Nothing) ">result != (System.Uri)null</ensures>
      <ensures csharp="result.Scheme == System.Uri.UriSchemeHttp || result.Scheme == System.Uri.UriSchemeHttps" vb="result.Scheme = System.Uri.UriSchemeHttp  OrElse result.Scheme = System.Uri.UriSchemeHttps ">result.Scheme == System.Uri.UriSchemeHttp || result.Scheme == System.Uri.UriSchemeHttps</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.ParameterBuilder.BuildParameter(System.String,System.String)">
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures csharp="0 &lt;= result.Length" vb="0 &lt;= result.Length">0 &lt;= result.Length</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.ParameterBuilder.OrderByParameter">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:Linq2Rest.Provider.QueryableExtensions.ResolvePropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <requires csharp="property != null" vb="property &lt;&gt; Nothing">property != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringToUpperMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringToUpperMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringTrimMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringTrimMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.IValueWriter.Handles(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)">
      <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.MathMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.MathMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.MathMethodWriter.MethodName">
      <getter>
        <ensures csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringToLowerMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringToLowerMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringEndsWithMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringEndsWithMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.DefaultMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.DefaultMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.DefaultMethodWriter.GetValue(System.Linq.Expressions.Expression)">
      <requires csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.AnyAllMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.AnyAllMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.EmptyAnyMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.EmptyAnyMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.EnumValueWriter.Handles(System.Type)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Handles(System.Type)" inheritedFromTypeName="IValueWriter" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.EnumValueWriter.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.MathCeilingMethodWriter.MethodName">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.MathMethodWriter.get_MethodName" inheritedFromTypeName="MathMethodWriter" csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.EqualsMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.EqualsMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringSubstringMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringSubstringMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringReplaceMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringReplaceMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringIndexOfMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringIndexOfMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.ValueWriterBase`1.Handles(System.Type)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Handles(System.Type)" inheritedFromTypeName="IValueWriter" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.ValueWriterBase`1.Write(System.Object)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IValueWriter.Write(System.Object)" inheritedFromTypeName="IValueWriter" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringContainsMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringContainsMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.MathRoundMethodWriter.MethodName">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.MathMethodWriter.get_MethodName" inheritedFromTypeName="MathMethodWriter" csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="P:Linq2Rest.Provider.Writers.MathFloorMethodWriter.MethodName">
      <getter>
        <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.MathMethodWriter.get_MethodName" inheritedFromTypeName="MathMethodWriter" csharp="!IsNullOrWhiteSpace(result)" vb="Not IsNullOrWhiteSpace(result)">!string.IsNullOrWhiteSpace(result)</ensures>
      </getter>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringStartsWithMethodWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.CanHandle(System.Linq.Expressions.MethodCallExpression)" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.Writers.StringStartsWithMethodWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})">
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="expressionWriter != null" vb="expressionWriter &lt;&gt; Nothing">expressionWriter != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.Writers.IMethodCallWriter.Handle(System.Linq.Expressions.MethodCallExpression,System.Func{System.Linq.Expressions.Expression,System.String})" inheritedFromTypeName="IMethodCallWriter" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="T:Linq2Rest.Provider.RestPostQueryProvider`1">
      <invariant>_inputData != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestPostQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,Linq2Rest.Provider.IExpressionProcessor,System.IO.Stream)">
      <requires csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <requires csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <requires csharp="expressionProcessor != null" vb="expressionProcessor &lt;&gt; Nothing">expressionProcessor != null</requires>
      <requires csharp="inputData != null" vb="inputData &lt;&gt; Nothing">inputData != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.RestPostQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestPostQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
    </member>
    <member name="T:Linq2Rest.Provider.RestQueryProvider`1">
      <invariant>Client != null</invariant>
      <invariant>SerializerFactory != null</invariant>
      <invariant>_expressionProcessor != null</invariant>
      <invariant>_parameterBuilder != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,Linq2Rest.Provider.IExpressionProcessor)">
      <requires csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <requires csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <requires csharp="expressionProcessor != null" vb="expressionProcessor &lt;&gt; Nothing">expressionProcessor != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)">
      <requires csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)">
      <requires csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryProvider`1.Client">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryProvider`1.SerializerFactory">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="M:Linq2Rest.Provider.RestDeleteQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,Linq2Rest.Provider.IExpressionProcessor)">
      <requires csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <requires csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <requires csharp="expressionProcessor != null" vb="expressionProcessor &lt;&gt; Nothing">expressionProcessor != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.RestDeleteQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestDeleteQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.RestGetQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,Linq2Rest.Provider.IExpressionProcessor)">
      <requires csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <requires csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <requires csharp="expressionProcessor != null" vb="expressionProcessor &lt;&gt; Nothing">expressionProcessor != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.RestGetQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestGetQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <requires csharp="resultLoader != null" vb="resultLoader &lt;&gt; Nothing">resultLoader != null</requires>
      <requires csharp="intermediateResultLoader != null" vb="intermediateResultLoader &lt;&gt; Nothing">intermediateResultLoader != null</requires>
    </member>
    <member name="T:Linq2Rest.Provider.RestGetQueryable`1">
      <invariant>_restGetQueryProvider != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestGetQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestGetQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,System.Linq.Expressions.Expression)">
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="T:Linq2Rest.Provider.RestPostQueryable`1">
      <invariant>_restPostQueryProvider != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestPostQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,System.Linq.Expressions.Expression,System.IO.Stream)">
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="T:Linq2Rest.Provider.RestDeleteQueryable`1">
      <invariant>_restDeleteQueryProvider != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestDeleteQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestDeleteQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,System.Linq.Expressions.Expression)">
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="T:Linq2Rest.Provider.RestPutQueryable`1">
      <invariant>_restPutQueryProvider != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestPutQueryable`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,System.Linq.Expressions.Expression,System.IO.Stream)">
      <requires exception="T:System.ArgumentNullException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentNullException">client == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentNullException">serializerFactory == null</exception>
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="T:Linq2Rest.Provider.RestQueryableBase`1">
      <invariant>Client != null</invariant>
      <invariant>Expression != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryableBase`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory)">
      <requires exception="T:System.ArgumentException" csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <exception cref="T:System.ArgumentException">client == null</exception>
      <requires exception="T:System.ArgumentException" csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <exception cref="T:System.ArgumentException">serializerFactory == null</exception>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryableBase`1.GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestQueryableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_Model == this.get_Model" vb="result.get_Model = Me.get_Model">result.get_Model == this.get_Model</ensures>
      <ensures inheritedFrom="M:System.Collections.IEnumerable.GetEnumerator" inheritedFromTypeName="IEnumerable" csharp="result.get_CurrentIndex == -1" vb="result.get_CurrentIndex = -1">result.get_CurrentIndex == -1</ensures>
    </member>
    <member name="P:Linq2Rest.Provider.RestQueryableBase`1.Client">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
    </member>
    <member name="T:Linq2Rest.Provider.ExpressionProcessor">
      <invariant>_writer != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.#ctor(Linq2Rest.Provider.IExpressionWriter)">
      <requires csharp="writer != null" vb="writer &lt;&gt; Nothing">writer != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires inheritedFrom="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})" inheritedFromTypeName="IExpressionProcessor" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})" inheritedFromTypeName="IExpressionProcessor" csharp="resultLoader != null" vb="resultLoader &lt;&gt; Nothing">resultLoader != null</requires>
      <requires inheritedFrom="M:Linq2Rest.Provider.IExpressionProcessor.ProcessMethodCall``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})" inheritedFromTypeName="IExpressionProcessor" csharp="intermediateResultLoader != null" vb="intermediateResultLoader &lt;&gt; Nothing">intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ResolveProjection(Linq2Rest.Provider.ParameterBuilder,System.Linq.Expressions.LambdaExpression)">
      <requires csharp="lambdaExpression != null" vb="lambdaExpression &lt;&gt; Nothing">lambdaExpression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.InvokeEager(System.Linq.Expressions.MethodCallExpression,System.Object)">
      <requires csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <requires csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ResolveInvocationParameters(System.Collections.IEnumerable,System.Linq.Expressions.MethodCallExpression)">
      <requires csharp="results != null" vb="results &lt;&gt; Nothing">results != null</requires>
      <requires csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.GetMethodResult``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires csharp="new Linq2Rest.Provider.ExpressionProcessor.&lt;&gt;c__DisplayClass9&lt;T&gt;(){&#xD;&#xA;    methodCall = methodCall, &#xD;&#xA;}.methodCall != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Provider.ExpressionProcessor.&lt;&gt;c__DisplayClass9&lt;T&gt; local_12_prime = New Linq2Rest.Provider.ExpressionProcessor.&lt;&gt;c__DisplayClass9(Of T)();&#xD;&#xA;    (local_12_prime.methodCall = methodCall)&#xD;&#xA;    return local_12_prime; })().methodCall &lt;&gt; Nothing">new Linq2Rest.Provider.ExpressionProcessor.&lt;&gt;c__DisplayClass9&lt;T&gt;(){
    methodCall = methodCall, 
}.methodCall != null</requires>
      <requires csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <requires csharp="resultLoader != null" vb="resultLoader &lt;&gt; Nothing">resultLoader != null</requires>
      <requires csharp="intermediateResultLoader != null" vb="intermediateResultLoader &lt;&gt; Nothing">intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.GetResult``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <requires csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
      <requires csharp="resultLoader != null" vb="resultLoader &lt;&gt; Nothing">resultLoader != null</requires>
      <requires csharp="intermediateResultLoader != null" vb="intermediateResultLoader &lt;&gt; Nothing">intermediateResultLoader != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionProcessor.ExecuteMethod``1(System.Linq.Expressions.MethodCallExpression,Linq2Rest.Provider.ParameterBuilder,System.Func{Linq2Rest.Provider.ParameterBuilder,System.Collections.Generic.IEnumerable{``0}},System.Func{System.Type,Linq2Rest.Provider.ParameterBuilder,System.Collections.IEnumerable})">
      <requires csharp="methodCall != null" vb="methodCall &lt;&gt; Nothing">methodCall != null</requires>
      <requires csharp="resultLoader != null" vb="resultLoader &lt;&gt; Nothing">resultLoader != null</requires>
      <requires csharp="intermediateResultLoader != null" vb="intermediateResultLoader &lt;&gt; Nothing">intermediateResultLoader != null</requires>
      <requires csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
    </member>
    <member name="T:Linq2Rest.Provider.RestPutQueryProvider`1">
      <invariant>_inputData != null</invariant>
    </member>
    <member name="M:Linq2Rest.Provider.RestPutQueryProvider`1.#ctor(Linq2Rest.Provider.IRestClient,Linq2Rest.Provider.ISerializerFactory,Linq2Rest.Provider.IExpressionProcessor,System.IO.Stream)">
      <requires csharp="client != null" vb="client &lt;&gt; Nothing">client != null</requires>
      <requires csharp="serializerFactory != null" vb="serializerFactory &lt;&gt; Nothing">serializerFactory != null</requires>
      <requires csharp="expressionProcessor != null" vb="expressionProcessor &lt;&gt; Nothing">expressionProcessor != null</requires>
      <requires csharp="inputData != null" vb="inputData &lt;&gt; Nothing">inputData != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.RestPutQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetResults(Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.RestPutQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)">
      <requires inheritedFrom="M:Linq2Rest.Provider.RestQueryProvider`1.GetIntermediateResults(System.Type,Linq2Rest.Provider.ParameterBuilder)" inheritedFromTypeName="RestQueryProvider" csharp="builder != null" vb="builder &lt;&gt; Nothing">builder != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetUnconvertedType(System.Linq.Expressions.Expression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetMemberCall(System.Linq.Expressions.MemberExpression)">
      <requires csharp="memberExpression != null" vb="memberExpression &lt;&gt; Nothing">memberExpression != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetValue(System.Linq.Expressions.Expression)">
      <requires csharp="input != null" vb="input &lt;&gt; Nothing">input != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetOperation(System.Linq.Expressions.Expression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.Write(System.Linq.Expressions.Expression,System.Type,System.Linq.Expressions.ParameterExpression)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Provider.ExpressionWriter.GetMethodCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.ParameterExpression)">
      <requires csharp="new Linq2Rest.Provider.ExpressionWriter.&lt;&gt;c__DisplayClass6(){&#xD;&#xA;    expression = expression, &#xD;&#xA;    rootParameterName = rootParameterName, &#xD;&#xA;    &lt;&gt;4__this = this, &#xD;&#xA;}.expression != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Provider.ExpressionWriter.&lt;&gt;c__DisplayClass6 local_1_prime = New Linq2Rest.Provider.ExpressionWriter.&lt;&gt;c__DisplayClass6();&#xD;&#xA;    (local_1_prime.expression = expression)&#xD;&#xA;    (local_1_prime.rootParameterName = rootParameterName)&#xD;&#xA;    (local_1_prime.&lt;&gt;4__this = Me)&#xD;&#xA;    return local_1_prime; })().expression &lt;&gt; Nothing">new Linq2Rest.Provider.ExpressionWriter.&lt;&gt;c__DisplayClass6(){
    expression = expression, 
    rootParameterName = rootParameterName, 
    &lt;&gt;4__this = this, 
}.expression != null</requires>
    </member>
    <member name="M:Linq2Rest.ModelFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})">
      <requires inheritedFrom="M:Linq2Rest.IModelFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})" inheritedFromTypeName="IModelFilter" exception="T:System.ArgumentNullException" csharp="source != null" vb="source &lt;&gt; Nothing">source != null</requires>
      <exception cref="T:System.ArgumentNullException">source == null</exception>
    </member>
    <member name="T:Linq2Rest.Parser.TokenSet">
      <invariant>_left != null</invariant>
      <invariant>_right != null</invariant>
      <invariant>_operation != null</invariant>
    </member>
    <member name="M:Linq2Rest.Parser.TokenSet.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="P:Linq2Rest.Parser.TokenSet.Left">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="P:Linq2Rest.Parser.TokenSet.Operation">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="P:Linq2Rest.Parser.TokenSet.Right">
      <getter>
        <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
      </getter>
      <setter>
        <requires exception="T:System.ArgumentNullException" csharp="value != null" vb="value &lt;&gt; Nothing">value != null</requires>
      </setter>
      <exception cref="T:System.ArgumentNullException">value == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ParameterValueReader.Read(System.Type,System.String,System.IFormatProvider)">
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        Linq2Rest.Parser.Readers.ParameterValueReader.&lt;&gt;c__DisplayClass2 local_1 = new Linq2Rest.Parser.Readers.ParameterValueReader.&lt;&gt;c__DisplayClass2();&#xD;&#xA;        local_1.type = type;&#xD;&#xA;    }&#xD;&#xA;    return token != null; })()" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Parser.Readers.ParameterValueReader.&lt;&gt;c__DisplayClass2 local_1 = New Linq2Rest.Parser.Readers.ParameterValueReader.&lt;&gt;c__DisplayClass2();&#xD;&#xA;    local_1.type = type&#xD;&#xA;    return token &lt;&gt; Nothing; })()">(() =&gt; {
    {
        Linq2Rest.Parser.Readers.ParameterValueReader.&lt;&gt;c__DisplayClass2 local_1 = new Linq2Rest.Parser.Readers.ParameterValueReader.&lt;&gt;c__DisplayClass2();
        local_1.type = type;
    }
    return token != null; })()</requires>
      <requires csharp="local_1.type != (System.Type)null" vb="local_1.type &lt;&gt; ((System.Type)Nothing) ">local_1.type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ParameterValueReader.GetKnownConstant(System.Type,System.String,System.IFormatProvider)">
      <requires csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ParameterValueReader.GetParseExpression(System.String,System.IFormatProvider,System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Handles(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)">
      <requires csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ValueExpressionFactoryBase`1.Handles(System.Type)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Handles(System.Type)" inheritedFromTypeName="IValueExpressionFactory" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.ValueExpressionFactoryBase`1.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory" csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.EnumExpressionFactory.Handles(System.Type)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Handles(System.Type)" inheritedFromTypeName="IValueExpressionFactory" csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.Readers.EnumExpressionFactory.Convert(System.String)">
      <requires inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory" csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <ensures inheritedFrom="M:Linq2Rest.Parser.Readers.IValueExpressionFactory.Convert(System.String)" inheritedFromTypeName="IValueExpressionFactory" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.MemberNameResolver.ResolveName(System.Reflection.MemberInfo)">
      <requires inheritedFrom="M:Linq2Rest.Parser.IMemberNameResolver.ResolveName(System.Reflection.MemberInfo)" inheritedFromTypeName="IMemberNameResolver" exception="T:System.ArgumentNullException" csharp="member != (System.Reflection.MemberInfo)null" vb="member &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">member != (System.Reflection.MemberInfo)null</requires>
      <exception cref="T:System.ArgumentNullException">!member != (System.Reflection.MemberInfo)null</exception>
      <ensures inheritedFrom="M:Linq2Rest.Parser.IMemberNameResolver.ResolveName(System.Reflection.MemberInfo)" inheritedFromTypeName="IMemberNameResolver" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.MemberNameResolver.ResolveNameInternal(System.Reflection.MemberInfo)">
      <requires csharp="member != (System.Reflection.MemberInfo)null" vb="member &lt;&gt; ((System.Reflection.MemberInfo)Nothing) ">member != (System.Reflection.MemberInfo)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FunctionTokenSet.ToString">
      <ensures inheritedFrom="M:System.Object.ToString" inheritedFromTypeName="Object" csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetFunctionParameterType(System.String)">
      <requires csharp="operation != null" vb="operation &lt;&gt; Nothing">operation != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetPropertyExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression})">
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        System.Func&lt;System.Linq.Expressions.ParameterExpression, bool&gt; local_5 = (System.Func&lt;System.Linq.Expressions.ParameterExpression, bool&gt;)null;&#xD;&#xA;        Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass4&lt;T&gt; local_6 = new Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass4&lt;T&gt;();&#xD;&#xA;    }&#xD;&#xA;    return propertyToken != null; })()" vb="(() =&gt; {&#xD;&#xA;    System.Func&lt;System.Linq.Expressions.ParameterExpression, bool&gt; local_5 = ((System.Func(Of System.Linq.Expressions.ParameterExpression, Boolean))Nothing);&#xD;&#xA;    Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass4&lt;T&gt; local_6 = New Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass4(Of T)();&#xD;&#xA;    return propertyToken &lt;&gt; Nothing; })()">(() =&gt; {
    {
        System.Func&lt;System.Linq.Expressions.ParameterExpression, bool&gt; local_5 = (System.Func&lt;System.Linq.Expressions.ParameterExpression, bool&gt;)null;
        Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass4&lt;T&gt; local_6 = new Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass4&lt;T&gt;();
    }
    return propertyToken != null; })()</requires>
      <requires csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetExpressionType``1(Linq2Rest.Parser.TokenSet,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression})">
      <requires csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetOperation(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <requires csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <requires csharp="right != null" vb="right &lt;&gt; Nothing">right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetLeftRightOperation(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <requires csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <requires csharp="left != null" vb="left &lt;&gt; Nothing">left != null</requires>
      <requires csharp="right != null" vb="right &lt;&gt; Nothing">right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetRightOperation(System.String,System.Linq.Expressions.Expression)">
      <requires csharp="token != null" vb="token &lt;&gt; Nothing">token != null</requires>
      <requires csharp="right != null" vb="right &lt;&gt; Nothing">right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetFunction(System.String,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression})">
      <requires csharp="function != null" vb="function &lt;&gt; Nothing">function != null</requires>
      <requires csharp="left != null" vb="left &lt;&gt; Nothing">left != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.CreateAnyAllExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Reflection.MethodInfo)">
      <requires csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        new Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass9().sourceParameter = sourceParameter;&#xD;&#xA;    }&#xD;&#xA;    return left != null; })()" vb="(() =&gt; {&#xD;&#xA;    New Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass9().sourceParameter = sourceParameter&#xD;&#xA;    return left &lt;&gt; Nothing; })()">(() =&gt; {
    {
        new Linq2Rest.Parser.FilterExpressionFactory.&lt;&gt;c__DisplayClass9().sourceParameter = sourceParameter;
    }
    return left != null; })()</requires>
      <requires csharp="right != null" vb="right &lt;&gt; Nothing">right != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetNonNullableType(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.SupportsNegate(System.Type)">
      <requires csharp="type != (System.Type)null" vb="type &lt;&gt; ((System.Type)Nothing) ">type != (System.Type)null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.CreateExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider)">
      <requires csharp="filter != null" vb="filter &lt;&gt; Nothing">filter != null</requires>
      <requires csharp="sourceParameter != null" vb="sourceParameter &lt;&gt; Nothing">sourceParameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetTokenExpression``1(System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider,System.Collections.Generic.ICollection{Linq2Rest.Parser.TokenSet})">
      <requires csharp="tokens != null" vb="tokens &lt;&gt; Nothing">tokens != null</requires>
      <requires csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetArithmeticExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider)">
      <requires csharp="filter != null" vb="filter &lt;&gt; Nothing">filter != null</requires>
      <requires csharp="parameter != null" vb="parameter &lt;&gt; Nothing">parameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetAnyAllFunctionExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.IFormatProvider)">
      <requires csharp="filter != null" vb="filter &lt;&gt; Nothing">filter != null</requires>
      <requires csharp="sourceParameter != null" vb="sourceParameter &lt;&gt; Nothing">sourceParameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.GetFunctionExpression``1(System.String,System.Linq.Expressions.ParameterExpression,System.Collections.Generic.ICollection{System.Linq.Expressions.ParameterExpression},System.Type,System.IFormatProvider)">
      <requires csharp="filter != null" vb="filter &lt;&gt; Nothing">filter != null</requires>
      <requires csharp="sourceParameter != null" vb="sourceParameter &lt;&gt; Nothing">sourceParameter != null</requires>
      <requires csharp="lambdaParameters != null" vb="lambdaParameters &lt;&gt; Nothing">lambdaParameters != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.FilterExpressionFactory.ParameterVisitor.GetParameters(System.Linq.Expressions.Expression)">
      <requires csharp="expr != null" vb="expr &lt;&gt; Nothing">expr != null</requires>
      <ensures csharp="result != null" vb="result &lt;&gt; Nothing">result != null</ensures>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsCombinationOperation(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass1(){&#xD;&#xA;    operation = operation, &#xD;&#xA;}.operation != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass1 local_0_prime = New Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass1();&#xD;&#xA;    (local_0_prime.operation = operation)&#xD;&#xA;    return local_0_prime; })().operation &lt;&gt; Nothing">new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass1(){
    operation = operation, 
}.operation != null</requires>
      <exception cref="T:System.ArgumentNullException">new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass1(){
    operation = operation, 
}.operation == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsOperation(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass4(){&#xD;&#xA;    operation = operation, &#xD;&#xA;}.operation != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass4 local_0_prime = New Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass4();&#xD;&#xA;    (local_0_prime.operation = operation)&#xD;&#xA;    return local_0_prime; })().operation &lt;&gt; Nothing">new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass4(){
    operation = operation, 
}.operation != null</requires>
      <exception cref="T:System.ArgumentNullException">new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass4(){
    operation = operation, 
}.operation == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsArithmetic(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass7(){&#xD;&#xA;    operation = operation, &#xD;&#xA;}.operation != null" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass7 local_0_prime = New Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass7();&#xD;&#xA;    (local_0_prime.operation = operation)&#xD;&#xA;    return local_0_prime; })().operation &lt;&gt; Nothing">new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass7(){
    operation = operation, 
}.operation != null</requires>
      <exception cref="T:System.ArgumentNullException">new Linq2Rest.Parser.TokenOperatorExtensions.&lt;&gt;c__DisplayClass7(){
    operation = operation, 
}.operation == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsImpliedBoolean(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.EnclosedMatch(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsEnclosed(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.TokenOperatorExtensions.IsFunction(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
      <exception cref="T:System.ArgumentNullException">expression == null</exception>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetArithmeticToken(System.String)">
      <requires exception="T:System.ArgumentNullException" csharp="(() =&gt; {&#xD;&#xA;    {&#xD;&#xA;        Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19 local_8 = new Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19();&#xD;&#xA;    }&#xD;&#xA;    return expression != null; })()" vb="(() =&gt; {&#xD;&#xA;    Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19 local_8 = New Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19();&#xD;&#xA;    return expression &lt;&gt; Nothing; })()">(() =&gt; {
    {
        Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19 local_8 = new Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19();
    }
    return expression != null; })()</requires>
      <exception cref="T:System.ArgumentNullException">!(() =&gt; {
    {
        Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19 local_8 = new Linq2Rest.Parser.ExpressionTokenizer.&lt;&gt;c__DisplayClass19();
    }
    return (expression != null); })()</exception>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetAnyAllFunctionTokens(System.String)">
      <requires csharp="filter != null" vb="filter &lt;&gt; Nothing">filter != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetFunctionTokens(System.String)">
      <requires csharp="filter != null" vb="filter &lt;&gt; Nothing">filter != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.GetArithmeticOperationIndex(System.Collections.Generic.IList{System.String})">
      <requires csharp="blocks != null" vb="blocks &lt;&gt; Nothing">blocks != null</requires>
    </member>
    <member name="M:Linq2Rest.Parser.ExpressionTokenizer.HasOrphanedOpenParenthesis(System.String)">
      <requires csharp="expression != null" vb="expression &lt;&gt; Nothing">expression != null</requires>
    </member>
  </members>
</doc>